cmake_minimum_required(VERSION 3.0)
project(ParTI)

find_package(OpenMP REQUIRED)
find_package(CUDA)
#find_package(MKL)

#set(CMAKE_C_COMPILER "/opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icc")
#set(CMAKE_CXX_COMPILER "/opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wextra -fopenmp")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -fopenmp")

if (CUDA_FOUND)
	file(GLOB_RECURSE PARTI_SRC RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}" "src/*.c" "src/*.cu" "src/*.h" "include/*.h")
else (CUDA_FOUND)
	file(GLOB_RECURSE PARTI_SRC RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}" "src/*.c" "src/*.h" "include/*.h")
endif (CUDA_FOUND)
include_directories("include")
cuda_add_library(ParTI SHARED ${PARTI_SRC})
cuda_add_library(ParTI_s STATIC ${PARTI_SRC})

# MKL
#option(USE_MKL "Use Intel MKL library" OFF)
#if (USE_MKL)
#	include_directories(${MKL_INCLUDE_DIRS})
#	link_directories(${MKL_LIBRARIES})
#endif (USE_MKL)


set_target_properties(ParTI PROPERTIES C_STANDARD 99)
set_target_properties(ParTI_s PROPERTIES C_STANDARD 99)

add_subdirectory("examples")
add_subdirectory("tests")
